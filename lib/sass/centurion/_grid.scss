// Grid Column Generator
// ----------------------------

// Column Grid
@mixin column-grid {
  %column-base {
    @include box-sizing(border-box);
    float: $lang-front;
    padding: 0 $gutter / 2 + $value;
    position: relative;
  }
  
  /* Large Destkop Grid */
  /* ---------------------------- */
  .#{$container-class} {
    @extend %clearfix;
    margin: 0 auto;
    padding: 0;
    width: $desktop-width + $value;
    
    @include grid-creator(desktop);
  }
  
  /* Small Desktop Grid */
  /* ---------------------------- */
  @media screen and (max-width: $desktop-width + $value) {
    .#{$container-class} {
      width: 100%;
    }
    @include show-hide(desktop);
  }
  
  /* Tablet Grid */
  /* ---------------------------- */
  @media screen and (max-width: $tablet-width + $value) {
    @include grid-creator(tablet);
  }
    
  /* Mobile Grid */
  /* ---------------------------- */
  @media screen and (max-width: $mobile-width + $value) {
    @include grid-creator(mobile);
  }
  @include center-grid-elements();
}

// Grid Creator - stitches the magic together
@mixin grid-creator($type) {
  
  $push-elem-desktop: $prefix-class+'-'+$push-class;
  $pull-elem-desktop: $prefix-class+'-'+$pull-class;
  
  $push-elem-tablet: $tablet-grid-class+'-'+$push-class;
  $pull-elem-tablet: $tablet-grid-class+'-'+$pull-class;
  
  $push-elem-mobile: $mobile-grid-class+'-'+$push-class;
  $pull-elem-mobile: $mobile-grid-class+'-'+$pull-class;

  @if $type == desktop {
    @include grid-generate($desktop-columns, $desktop-width, $grid-class, true);    
    @include push-pull-elements($desktop-columns, $push-elem-desktop, $pull-elem-desktop);
  }
  
  @if $type == tablet {
    @include adjust-grid($tablet-columns, $desktop-columns, $grid-class, tablet);
    @include adjust-push-pull($tablet-columns, $desktop-columns, $push-elem-desktop, $pull-elem-desktop, tablet);
    .#{$container-class} {
      %full-width-tablet {
        width: 100%;
      }
      %no-push-pull-tablet {
        left: 0;
      }      
      @include grid-generate($tablet-columns, $tablet-width, $tablet-grid-class);
      @include push-pull-elements($tablet-columns, $push-elem-tablet, $pull-elem-tablet);
    }
    @include show-hide(tablet);
  }
  
  @if $type == mobile {
    @include adjust-grid($mobile-columns, $desktop-columns, $grid-class, mobile);
    @include adjust-push-pull($mobile-columns, $desktop-columns, $push-elem-desktop, $pull-elem-desktop, mobile);
    @include adjust-grid($mobile-columns, $tablet-columns, $tablet-grid-class, mobile);
    @include adjust-push-pull($mobile-columns, $tablet-columns, $push-elem-tablet, $pull-elem-tablet, mobile);
    .#{$container-class} {
      %full-width-mobile {
        width: 100%;
      }
      @include grid-generate($mobile-columns, $mobile-width, $mobile-grid-class);
      @include push-pull-elements($mobile-columns, $push-elem-mobile, $pull-elem-mobile);
      %no-push-pull-mobile {
        #{$lang-front}: 0;
      }
    }
    @include show-hide(mobile);
  }
}

// Generate grid columns
@mixin grid-generate($columns, $width, $class, $exclude: false) {
  @for $i from 1 through $columns {
    $num: $i;
    $calc-width: $width / $columns;
    $percent: 100 / $columns * $i * 1%;
    $decimal: $num * $calc-width / $columns;
    
    .#{$class}-#{$i} {
      @extend %column-base;
      @extend %clearfix;
      width: $percent;
      
      @if $exclude == true {}
      // @TODO: work on optimizing IE7 grid support in _grid-legacy.scss
      //@include ie7-grid-element($decimal);
    }
  }

  @include nested-grid-elements($class);
}

// Adjust Grid for Responsive
@mixin adjust-grid($columns, $column-count, $class, $respond) {
  @for $i from 1 through $column-count {
    $percent: 100 / $columns * $i * 1%;
    @if $i < $columns + 1 {
      .#{$class}-#{$i} {
        width: $percent;
      }
    }
    @if $i > $columns {
      .#{$class}-#{$i} {
        @extend %full-width-#{$respond};
      }
    }
  }
} 

// Push & Pull Grid Element
@mixin push-pull-elements($columns, $push-elem, $pull-elem) {
  @for $i from 1 through $columns {
    $percent: 100 / $columns * $i * 1%;
    @if $i < $columns + 1 {
      .#{$push-elem}-#{$i} {
        #{$lang-front}: $percent;
      }
      .#{$pull-elem}-#{$i} {
        #{$lang-front}: -$percent;
      }
    }
  }
}

// Adjust Push and Pull for Responsive
@mixin adjust-push-pull($columns, $column-count, $push-elem, $pull-elem, $respond) {
  @for $i from 1 through $column-count {
    $percent: 100 / $columns * $i * 1%;
    @if $i < $columns + 1 {
      .#{$push-elem}-#{$i} {
        #{$lang-front}: $percent;
      }
      .#{$pull-elem}-#{$i} {
        #{$lang-front}: -$percent;
      }
    }
    @if $i > $columns {
      .#{$push-elem}-#{$i},
      .#{$pull-elem}-#{$i} {
        @extend %no-push-pull-#{$respond};
      }
    }
  }
}

// Nested Children
@mixin nested-grid-elements($class: $grid-class) {
  [class*=#{$class}] {
    [class*=#{$class}]:first-of-type {
      padding-left: 0;
    }
    [class*=#{$class}]:last-of-type {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

// Grid Center
@mixin center-grid-elements($class: $grid-class) {
  .#{$class}-center {
    float: none !important;
    margin: 0 auto;
  }
}

// Show & Hide
@mixin show-hide($value) {
  @include hide-view($value);
  @include show-view($value);
}
