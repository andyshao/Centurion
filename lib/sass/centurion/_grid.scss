// Grid Column Generator
// ----------------------------

@mixin column-grid {
  %column-base {
    @include box-sizing(border-box);
    float: $lang-front;
    padding: 0 $gutter / 2 + $value;
    position: relative;
  }
  
  /* Large Destkop Grid */
  /* ---------------------------- */
  .#{$container-class} {
    @extend %clearfix;
    margin: 0 auto;
    padding: 0;
    width: $desktop-width + $value;
    // initial grid
    @include grid-generate($desktop-columns, $desktop-width, $grid-class, true);
    
    // @TODO: make class construction better, possibly global classes for push and pull
    $push-elem: $prefix-class+'-'+$push-class;
    $pull-elem: $prefix-class+'-'+$pull-class;
    @include push-pull-elements($desktop-columns, $push-elem, $pull-elem);
  }
  
  /* Small Desktop Grid */
  /* ---------------------------- */
  @media screen and (max-width: $desktop-width + $value) {
    .#{$container-class} {
      width: 100%;
    }
    @include show-hide(desktop);
  }
  
  /* Tablet Grid */
  /* ---------------------------- */
  @media screen and (max-width: $tablet-width + $value) {
    @include adjust-grid($tablet-columns, $desktop-columns, $grid-class, tablet);
    %full-width-tablet {
      width: 100%;
    }
    .#{$container-class} {
      @include grid-generate($tablet-columns, $tablet-width, $tablet-grid-class);
      
      $push-elem: $tablet-grid-class+'-'+$push-class;
      $pull-elem: $tablet-grid-class+'-'+$pull-class;
      @include push-pull-elements($tablet-columns, $push-elem, $pull-elem);
      //@include push-pull-elements(tablet);
      %no-push-pull-tablet {
        left: 0;
      }
    }
    @include show-hide(tablet);
  }
    
  /* Mobile Grid */
  /* ---------------------------- */
  @media screen and (max-width: $mobile-width + $value) {
    @include adjust-grid($mobile-columns, $desktop-columns, $grid-class, mobile);
    @include adjust-grid($mobile-columns, $tablet-columns, $tablet-grid-class, mobile);
    %full-width-mobile {
      width: 100%;
    }
    .#{$container-class} {
      @include grid-generate($mobile-columns, $mobile-width, $mobile-grid-class);
      
      $push-elem: $mobile-grid-class+'-'+$push-class;
      $pull-elem: $mobile-grid-class+'-'+$pull-class;
      @include push-pull-elements($mobile-columns, $push-elem, $pull-elem);
      //@include adjust-push-pull(desktop);
      //@include adjust-push-pull(tablet);
      %no-push-pull-mobile {
        #{$lang-front}: 0;
      }
    }
    @include show-hide(mobile);
  }
}

@mixin grid-generate($columns, $width, $class, $exclude: false) {
  @for $i from 1 through $columns {
    $num: $i;
    $calc-width: $width / $columns;
    $percent: 100 / $columns * $i * 1%;
    $decimal: $num * $calc-width / $columns;
    
    .#{$class}-#{$i} {
      @extend %column-base;
      @extend %clearfix;
      width: $percent;
      
      @if $exclude == true {}
      // @TODO: work on optimizing IE7 grid support in _grid-legacy.scss
      //@include ie7-grid-element($decimal);
    }
  }

  @include nested-grid-elements($class);
  @include center-grid-elements($class);
}


// Adjust Grid for Responsive
// @TODO: how to extend within media query on matching grid #'s
@mixin adjust-grid($columns, $column-count, $class, $respond) {
  @for $i from 1 through $column-count {
    $percent: 100 / $columns * $i * 1%;
    
    @if $i < $columns + 1 {
      .#{$class}-#{$i} {
        width: $percent;
        //@extend .#{$prefix-class}-#{$respond}-#{$i};
      }
    }
    @if $i > $columns {
      .#{$class}-#{$i} {
        @extend %full-width-#{$respond};
      }
    }
  }
} 



// Push & Pull Grid Element
@mixin push-pull-elements($columns, $push-elem, $pull-elem) {
  @for $i from 1 through $columns {
    $percent: 100 / $columns * $i * 1%;
    
    @if $i < $columns + 1 {
      .#{$push-elem}-#{$i} {
        #{$lang-front}: $percent;
      }
      .#{$pull-elem}-#{$i} {
        #{$lang-front}: -$percent;
      }
    }
  }
}

// Adjust Push and Pull for Responsive
// @TODO: how to extend within media query on matching push or pull #'s
@mixin adjust-push-pull($respond) {
  @if $respond == awesome {
    @for $i from 1 through $column-count {
      $percent: 100 / $columns * $i * 1%;
      
      @if $i < $columns + 1 {
        .#{$push-elem}-#{$i} {
          #{$lang-front}: $percent;
        }
        .#{$pull-elem}-#{$i} {
          #{$lang-front}: -$percent;
        }
      }
      
      @if $i > $columns {
        .#{$push-elem}-#{$i},
        .#{$pull-elem}-#{$i} {
          //#{$lang-front}: 0;
          @extend %no-push-pull-#{$respond};
        }
      }
      
    }
  }
  @if $respond == desktop {}
  @if $respond == tablet {} 
}



// Grid Reset for Smaller Screens
@mixin grid-reset($class: $grid-class) {
  [class*=#{$class}] {
    width: 100%;
  }
}

// Nested Children
@mixin nested-grid-elements($class: $grid-class) {
  [class*=#{$class}] {
    [class*=#{$class}]:first-of-type {
      padding-left: 0;
    }
    [class*=#{$class}]:last-of-type {
      padding-right: 0;
    }
  }
}

// Grid Center
@mixin center-grid-elements($class: $grid-class) {
  .#{$class}-center {
    float: none;
    margin: 0 auto;
  }
}

// Show & Hide
@mixin show-hide($value) {
  @include hide-view($value);
  @include show-view($value);
}
